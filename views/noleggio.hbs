<!DOCTYPE html>
<html lang="it">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Noleggio e Vendita - Catalogo</title>
  <!-- Importa Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <!-- Importa Font Awesome per le icone -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <!-- DateRangePicker CSS -->
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
  <!-- jQuery è richiesto per DateRangePicker -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- Moment.js è richiesto per manipolazione date -->
  <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
  <!-- DateRangePicker JS -->
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
  <style>
    /* Variabili CSS per la palette professionale */
    :root {
      --primary-color: #3a6ea5;
      /* Blu acceso professionale */
      --secondary-color: #004e98;
      /* Blu scuro */
      --accent-color: #ff6b6b;
      /* Rosso-arancio per evidenziazioni */
      --light-bg: #f7f9fc;
      /* Bianco-azzurro per sfondi */
      --dark-bg: #293241;
      /* Blu scurissimo per contrasto */
      --light-text: #ffffff;
      --dark-text: #293241;
      --light-gray: #e6e9ef;
      --medium-gray: #d1d5db;
      --text-secondary: #5d7285;
      --success-color: #06d6a0;
      /* Verde per notifiche positive */
      --error-color: #ef476f;
      /* Rosso per errori */
      --transition-speed: 0.3s;
      --card-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      --hover-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    /* Reset globale */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background-color: var(--light-bg);
      color: var(--dark-text);
      line-height: 1.6;
      padding-top: 70px;
      /* Spazio per header fisso */
    }

    /* Header e Navbar */
    header {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      background: linear-gradient(135deg, var(--dark-bg), var(--secondary-color));
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      z-index: 1000;
    }

    .navbar {
      max-width: 1300px;
      margin: 0 auto;
      padding: 12px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .navbar .logo {
      font-size: 1.6em;
      font-weight: 700;
      color: var(--light-text);
      display: flex;
      align-items: center;
    }

    .navbar .logo:before {
      content: "\f115";
      font-family: 'Font Awesome 5 Free';
      font-weight: 900;
      margin-right: 10px;
      color: var(--accent-color);
    }

    .nav-links {
      list-style: none;
      display: flex;
      gap: 25px;
    }

    .nav-links li a {
      color: var(--light-text);
      text-decoration: none;
      padding: 8px 16px;
      border-radius: 25px;
      transition: all var(--transition-speed);
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .nav-links li a:hover {
      background-color: rgba(255, 255, 255, 0.15);
      transform: translateY(-2px);
    }

    .nav-links li a i {
      font-size: 1.1em;
    }

    /* Stile per l'icona del carrello */
    .cart-icon {
      position: relative;
    }

    .cart-count {
      position: absolute;
      top: -8px;
      right: -8px;
      background-color: var(--accent-color);
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.7em;
      font-weight: 700;
    }

    /* Titoli */
    h1,
    h2 {
      text-align: center;
      margin-bottom: 25px;
      font-weight: 600;
    }

    h1 {
      font-size: 2.8em;
      color: var(--primary-color);
      margin-top: 30px;
      position: relative;
      padding-bottom: 15px;
    }

    h1:after {
      content: '';
      position: absolute;
      width: 80px;
      height: 4px;
      background: var(--accent-color);
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      border-radius: 2px;
    }

    h2 {
      font-size: 2em;
      color: var(--secondary-color);
      margin-top: 30px;
    }

    /* Contenitore per i filtri */
    .filter-container {
      max-width: 1300px;
      margin: 30px auto;
      background-color: var(--light-text);
      padding: 25px;
      border-radius: 12px;
      box-shadow: var(--card-shadow);
      transition: transform var(--transition-speed);
    }

    .filter-container:hover {
      transform: translateY(-5px);
    }

    .filter-container form {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: center;
      justify-content: center;
    }

    .filter-container div {
      flex: 1;
      min-width: 180px;
    }

    .filter-container label {
      font-weight: 500;
      display: block;
      margin-bottom: 6px;
      color: var(--text-secondary);
    }

    .filter-container input {
      width: 100%;
      padding: 12px 15px;
      border: 1px solid var(--medium-gray);
      border-radius: 8px;
      font-size: 1em;
      font-family: 'Poppins', sans-serif;
      transition: all var(--transition-speed);
    }

    .filter-container input:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(58, 110, 165, 0.2);
      outline: none;
    }

    .filter-container button {
      padding: 12px 20px;
      border: none;
      border-radius: 8px;
      font-size: 1em;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-speed);
      font-family: 'Poppins', sans-serif;
    }

    #filterForm button {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: var(--light-text);
      min-width: 120px;
    }

    #filterForm button:hover {
      transform: translateY(-3px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    #showAllForm {
      margin-top: 15px;
      text-align: center;
    }

    #showAllForm button {
      background: transparent;
      color: var(--secondary-color);
      border: 1px solid var(--secondary-color);
    }

    #showAllForm button:hover {
      background-color: rgba(58, 110, 165, 0.1);
    }

    /* Sezione prodotti */
    #products {
      max-width: 1300px;
      margin: 30px auto 50px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 25px;
      padding: 0 15px;
    }

    .card {
      background-color: var(--light-text);
      border-radius: 12px;
      overflow: hidden;
      box-shadow: var(--card-shadow);
      transition: all var(--transition-speed);
      position: relative;
    }

    .card:hover {
      transform: translateY(-10px);
      box-shadow: var(--hover-shadow);
    }

    .card:before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 6px;
      background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
    }

    .card-content {
      padding: 25px;
    }

    .card h3 {
      margin-bottom: 15px;
      font-size: 1.5em;
      color: var(--primary-color);
      font-weight: 600;
    }

    .card .details {
      margin-bottom: 20px;
    }

    .card p {
      margin: 10px 0;
      font-size: 1em;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
    }

    .card p i {
      margin-right: 10px;
      color: var(--accent-color);
      width: 20px;
      text-align: center;
    }

    .price {
      font-size: 1.4em !important;
      font-weight: 600;
      color: var(--secondary-color) !important;
      margin-bottom: 15px !important;
    }

    .card form {
      margin-top: 20px;
    }

    .card input[type="number"] {
      width: 100%;
      margin: 10px 0;
      padding: 12px 15px;
      border: 1px solid var(--medium-gray);
      border-radius: 8px;
      font-family: 'Poppins', sans-serif;
      transition: all var(--transition-speed);
    }

    .card input[type="number"]:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(58, 110, 165, 0.2);
      outline: none;
    }

    .card button {
      width: 100%;
      padding: 12px 15px;
      border: none;
      border-radius: 8px;
      font-size: 1em;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-speed);
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      font-family: 'Poppins', sans-serif;
    }

    .noleggio-form button {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: var(--light-text);
      margin-bottom: 10px;
    }

    .acquisto-form button {
      background: var(--accent-color);
      color: var(--light-text);
    }

    .card button:hover {
      transform: translateY(-3px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    /* Stili per notifiche */
    .notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 15px 25px;
      color: white;
      border-radius: 8px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
      transform: translateY(100px);
      opacity: 0;
      transition: transform 0.3s, opacity 0.3s;
      z-index: 1000;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .notification:before {
      font-family: 'Font Awesome 5 Free';
      font-weight: 900;
    }

    .notification {
      background: linear-gradient(135deg, var(--success-color), #08b389);
    }

    .notification:before {
      content: "\f058";
      /* check icon */
    }

    .notification.error {
      background: linear-gradient(135deg, var(--error-color), #d64161);
    }

    .notification.error:before {
      content: "\f057";
      /* x icon */
    }

    .notification.show {
      transform: translateY(0);
      opacity: 1;
    }

    /* Loading spinner */
    .loader {
      display: none;
      width: 50px;
      height: 50px;
      margin: 30px auto;
      position: relative;
    }

    .loader:before,
    .loader:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: 50%;
      border: 5px solid transparent;
      border-top-color: var(--accent-color);
    }

    .loader:before {
      z-index: 10;
      animation: spin 1s infinite;
    }

    .loader:after {
      border: 5px solid rgba(58, 110, 165, 0.1);
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    /* Messaggio nessun risultato */
    #no-results {
      grid-column: 1 / -1;
      text-align: center;
      padding: 30px;
      background: var(--light-text);
      border-radius: 12px;
      box-shadow: var(--card-shadow);
      font-size: 1.2em;
      color: var(--text-secondary);
    }

    #no-results:before {
      content: "\f57a";
      /* Sad face icon */
      font-family: 'Font Awesome 5 Free';
      font-weight: 900;
      display: block;
      font-size: 2em;
      color: var(--accent-color);
      margin-bottom: 15px;
    }

    /* Date Range Picker Stili Personalizzati */
    .daterangepicker {
      font-family: 'Poppins', sans-serif;
      border-radius: 8px;
      box-shadow: var(--card-shadow);
    }

    .daterangepicker .calendar-table {
      border-radius: 6px;
    }

    .daterangepicker td.active,
    .daterangepicker td.active:hover {
      background-color: var(--primary-color);
    }

    .daterangepicker .drp-buttons .btn {
      border-radius: 6px;
      font-family: 'Poppins', sans-serif;
    }

    .daterangepicker .drp-selected {
      font-size: 0.9em;
    }

    .date-range-container {
      width: 100%;
      position: relative;
      margin: 10px 0;
    }

    .date-range-container .date-range-input {
      width: 100%;
      padding: 12px 15px;
      padding-right: 40px;
      border: 1px solid var(--medium-gray);
      border-radius: 8px;
      font-size: 1em;
      font-family: 'Poppins', sans-serif;
      transition: all var(--transition-speed);
      cursor: pointer;
    }

    .date-range-container .date-range-input:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(58, 110, 165, 0.2);
      outline: none;
    }

    .date-range-container:after {
      content: "\f073";
      font-family: 'Font Awesome 5 Free';
      font-weight: 900;
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--accent-color);
      pointer-events: none;
    }

    .days-count {
      font-size: 0.9em;
      margin: 5px 0 10px;
      color: var(--text-secondary);
      font-weight: 500;
    }

    /* Stili per il Carrello */
    #cart-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1100;
      overflow-y: auto;
    }

    .cart-container {
      background-color: var(--light-bg);
      width: 90%;
      max-width: 900px;
      margin: 70px auto;
      border-radius: 12px;
      box-shadow: var(--hover-shadow);
      padding: 30px;
      position: relative;
    }

    .cart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 2px solid var(--light-gray);
    }

    .cart-title {
      font-size: 1.8em;
      color: var(--primary-color);
      font-weight: 600;
    }

    .cart-close {
      background: none;
      border: none;
      font-size: 1.5em;
      color: var(--text-secondary);
      cursor: pointer;
      transition: all 0.2s;
    }

    .cart-close:hover {
      color: var(--error-color);
      transform: scale(1.1);
    }

    .cart-items {
      max-height: 400px;
      overflow-y: auto;
      margin-bottom: 20px;
    }

    .cart-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 10px;
      border-bottom: 1px solid var(--light-gray);
      background-color: var(--light-text);
      border-radius: 8px;
      margin-bottom: 10px;
    }

    .cart-item-details {
      flex: 1;
      padding-right: 15px;
    }

    .cart-item-title {
      font-weight: 600;
      color: var(--primary-color);
      margin-bottom: 5px;
    }

    .cart-item-info {
      font-size: 0.9em;
      color: var(--text-secondary);
    }

    .cart-item-period {
      font-size: 0.85em;
      color: var(--text-secondary);
      font-style: italic;
      margin-top: 5px;
    }

    .cart-item-price {
      font-weight: 600;
      color: var(--secondary-color);
      font-size: 1.1em;
    }

    .cart-item-remove {
      background: none;
      border: none;
      color: var(--error-color);
      cursor: pointer;
      font-size: 1.1em;
      padding: 5px;
      transition: all 0.2s;
    }

    .cart-item-remove:hover {
      transform: scale(1.1);
    }

    .cart-empty {
      text-align: center;
      padding: 30px;
      font-size: 1.1em;
      color: var(--text-secondary);
    }

    .cart-empty i {
      display: block;
      font-size: 3em;
      color: var(--light-gray);
      margin-bottom: 15px;
    }

    .cart-summary {
      background-color: var(--light-text);
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 20px;
    }

    .cart-summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
      font-size: 1em;
      color: var(--text-secondary);
    }

    .cart-summary-total {
      font-size: 1.2em;
      font-weight: 600;
      color: var(--dark-text);
      padding-top: 10px;
      margin-top: 10px;
      border-top: 1px solid var(--light-gray);
    }

    .cart-actions {
      display: flex;
      justify-content: space-between;
      gap: 15px;
    }

    .cart-continue-shopping,
    .cart-checkout {
      flex: 1;
      padding: 12px 20px;
      border: none;
      border-radius: 8px;
      font-size: 1em;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }

    .cart-continue-shopping {
      background-color: var(--light-text);
      color: var(--primary-color);
      border: 1px solid var(--primary-color);
    }

    .cart-continue-shopping:hover {
      background-color: rgba(58, 110, 165, 0.1);
    }

    .cart-checkout {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: var(--light-text);
    }

    .cart-checkout:hover {
      transform: translateY(-3px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    /* Responsive design */
    @media (max-width: 768px) {
      .navbar {
        padding: 12px 15px;
      }

      .navbar .logo {
        font-size: 1.4em;
      }

      .nav-links {
        gap: 10px;
      }

      .nav-links li a {
        padding: 8px 12px;
      }

      h1 {
        font-size: 2.2em;
      }

      h2 {
        font-size: 1.8em;
      }

      .filter-container {
        padding: 20px 15px;
      }

      .filter-container form {
        flex-direction: column;
      }

      .filter-container div {
        width: 100%;
      }

      #products {
        grid-template-columns: 1fr;
        gap: 20px;
        padding: 0 10px;
      }

      .cart-container {
        width: 95%;
        padding: 20px 15px;
        margin: 50px auto;
      }

      .cart-item {
        flex-direction: column;
        align-items: flex-start;
      }

      .cart-item-details {
        width: 100%;
        padding-right: 0;
        margin-bottom: 10px;
      }

      .cart-item-actions {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .cart-actions {
        flex-direction: column;
      }
    }

    /* Mini badge per indicare che è un prodotto da noleggio o acquisto */
    .cart-item-type {
      display: inline-block;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 0.7em;
      font-weight: 600;
      margin-left: 10px;
      text-transform: uppercase;
    }

    .cart-item-type.rental {
      background-color: rgba(58, 110, 165, 0.2);
      color: var(--primary-color);
    }

    .cart-item-type.purchase {
      background-color: rgba(255, 107, 107, 0.2);
      color: var(--accent-color);
    }
  </style>
</head>

<body>
  <header>
    <nav class="navbar">
      <div class="logo">Noleggio & Vendita</div>
      <ul class="nav-links">
        <li><a href="/home"><i class="fas fa-home"></i> Home</a></li>
        <li><a href="/static/index.html"><i class="fas fa-comments"></i> Chat</a></li>
        <li>
          <a href="#" id="cart-button">
            <div class="cart-icon">
              <i class="fas fa-shopping-cart"></i>
              <span class="cart-count">0</span>
            </div>
            Carrello
          </a>
        </li>
        <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
      </ul>
    </nav>
  </header>

  <main>
    <h1>Catalogo Noleggio</h1>

    <section class="filter-container">
      <form id="filterForm" action="/noleggio" method="get">
        <div>
          <label for="brand">Brand:</label>
          <input type="text" id="brand" name="brand" placeholder="Es. Nike" value="{{brand}}">
        </div>
        <div>
          <label for="colore">Colore:</label>
          <input type="text" id="colore" name="colore" placeholder="Es. Rosso" value="{{colore}}">
        </div>
        <div>
          <label for="condizione">Condizione:</label>
          <input type="text" id="condizione" name="condizione" placeholder="Es. Nuovo" value="{{condizione}}">
        </div>
        <div>
          <label for="prezzoMin">Prezzo Minimo:</label>
          <input type="number" id="prezzoMin" name="prezzoMin" value="{{prezzoMin}}">
        </div>
        <div>
          <label for="prezzoMax">Prezzo Massimo:</label>
          <input type="number" id="prezzoMax" name="prezzoMax" value="{{prezzoMax}}">
        </div>
        <div>
          <button type="submit"><i class="fas fa-filter"></i> Filtra</button>
        </div>
      </form>
      <form id="showAllForm" action="/noleggio" method="get">
        <button type="submit"><i class="fas fa-sync-alt"></i> Mostra Tutti</button>
      </form>
    </section>

    <h2>Risultati:</h2>

    <div id="loaderContainer" class="loader"></div>

    <!-- Sezione prodotti -->
    <section id="products">
      {{#if products.length}}
      {{#each products}}
      <div class="card">
        <div class="card-content">
          <h3>{{brand}} - {{category}}</h3>
          <div class="details">
            <p class="price"><i class="fas fa-tag"></i> {{price}}€</p>
            <p><i class="fas fa-info-circle"></i> Condizione: {{condition}}</p>
            <p><i class="fas fa-palette"></i> Colore: {{color}}</p>
          </div>

          <!-- Form per il noleggio con date range picker -->
          <form class="noleggio-form" action="javascript:void(0);">
            <input type="hidden" name="id" value="{{id}}">
            <input type="hidden" name="brand" value="{{brand}}">
            <input type="hidden" name="category" value="{{category}}">
            <input type="hidden" name="price" value="{{price}}">
            <input type="hidden" name="color" value="{{color}}">
            <input type="hidden" name="condition" value="{{condition}}">
            <label for="daterange-{{id}}">Seleziona Periodo:</label>
            <div class="date-range-container">
              <input type="text" id="daterange-{{id}}" class="date-range-input" name="daterange" readonly required>
              <input type="hidden" id="durata-{{id}}" name="durata" value="1">
              <input type="hidden" name="startDate" id="startDate-{{id}}">
              <input type="hidden" name="endDate" id="endDate-{{id}}">
            </div>
            <p class="days-count" id="days-count-{{id}}">Durata: 1 giorno</p>
            <button type="submit" class="add-to-cart-rental"><i class="fas fa-cart-plus"></i> Aggiungi al
              carrello</button>
          </form>

          <!-- Form per l'acquisto -->
          <form class="acquisto-form" action="javascript:void(0);">
            <input type="hidden" name="id" value="{{id}}">
            <input type="hidden" name="brand" value="{{brand}}">
            <input type="hidden" name="category" value="{{category}}">
            <input type="hidden" name="price" value="{{price}}">
            <input type="hidden" name="color" value="{{color}}">
            <input type="hidden" name="condition" value="{{condition}}">
            <button type="submit" class="add-to-cart-purchase"><i class="fas fa-shopping-cart"></i> Acquista</button>
          </form>
        </div>
      </div>
      {{/each}}
      {{else}}
      <p id="no-results">Nessun prodotto trovato con i filtri applicati.</p>
      {{/if}}
    </section>
  </main>

  <!-- Modale Carrello -->
  <div id="cart-modal">
    <div class="cart-container">
      <div class="cart-header">
        <h2 class="cart-title"><i class="fas fa-shopping-cart"></i> Il tuo carrello</h2>
        <button class="cart-close"><i class="fas fa-times"></i></button>
      </div>

      <div class="cart-items">
        <!-- Gli elementi del carrello verranno inseriti qui dinamicamente -->
      </div>

      <div class="cart-summary">
        <div class="cart-summary-row">
          <span>Subtotale</span>
          <span id="cart-subtotal">0.00€</span>
        </div>
        <div class="cart-summary-row">
          <span>IVA (22%)</span>
          <span id="cart-tax">0.00€</span>
        </div>
        <div class="cart-summary-row cart-summary-total">
          <span>Totale</span>
          <span id="cart-total">0.00€</span>
        </div>
      </div>

      <div class="cart-actions">
        <button class="cart-continue-shopping">
          <i class="fas fa-arrow-left"></i> Continua lo shopping
        </button>
        <button class="cart-checkout">
          <i class="fas fa-check"></i> Procedi al checkout
        </button>
      </div>
    </div>
  </div>

  <!-- Contenitore per le notifiche -->
  <div id="notification" class="notification"></div>

  <!-- Script per AJAX, DateRangePicker e Carrello -->
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Inizializza il carrello dal localStorage
      let cart = JSON.parse(localStorage.getItem('cart')) || [];
      updateCartCount();

      // Gestione del carrello
      document.getElementById('cart-button').addEventListener('click', function (e) {
        e.preventDefault();
        openCart();
      });

      document.querySelector('.cart-close').addEventListener('click', function () {
        closeCart();
      });

      document.querySelector('.cart-continue-shopping').addEventListener('click', function () {
        closeCart();
      });

      document.querySelector('.cart-checkout').addEventListener('click', function () {
        if (cart.length === 0) {
          showNotification('Il carrello è vuoto!', true);
          return;
        }

        // Redirect alla pagina di checkout
        window.location.href = '/checkout';
      });

      // Funzioni per il carrello
      // Funzione modificata per il controllo di un solo prodotto in noleggio
      function addToCart(item) {
        // Verifica se l'articolo è di tipo "noleggio" e se esiste già nel carrello
        if (item.type === 'rental') {
          // Controlla se esiste già lo stesso prodotto in noleggio nel carrello
          const existingRentalItem = cart.find(cartItem =>
            cartItem.type === 'rental' && cartItem.id === item.id
          );

          if (existingRentalItem) {
            showNotification('Questo prodotto è già nel tuo carrello a noleggio!', true);
            return; // Interrompe la funzione senza aggiungere l'articolo
          }
        }

        // Se il controllo passa o è un prodotto in acquisto, prosegui con l'aggiunta
        // Genera un ID univoco per l'elemento del carrello
        item.cartId = Date.now() + Math.random().toString(36).substring(2, 9);
        cart.push(item);
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartCount();
        showNotification(item.type === 'rental' ? 'Noleggio aggiunto al carrello!' : 'Prodotto aggiunto al carrello!');
      }

      function removeFromCart(cartId) {
        cart = cart.filter(item => item.cartId !== cartId);
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartUI();
        updateCartCount();
      }

      function updateCartCount() {
        document.querySelector('.cart-count').textContent = cart.length;
      }

      function openCart() {
        updateCartUI();
        document.getElementById('cart-modal').style.display = 'block';
        document.body.style.overflow = 'hidden'; // Disabilita lo scroll della pagina
      }

      function closeCart() {
        document.getElementById('cart-modal').style.display = 'none';
        document.body.style.overflow = 'auto'; // Riabilita lo scroll della pagina
      }

      function updateCartUI() {
        const cartItemsContainer = document.querySelector('.cart-items');
        cartItemsContainer.innerHTML = '';

        if (cart.length === 0) {
          cartItemsContainer.innerHTML = `
            <div class="cart-empty">
              <i class="fas fa-shopping-cart"></i>
              Il tuo carrello è vuoto
            </div>
          `;
          updateCartTotals(0);
          return;
        }

        let subtotal = 0;

        cart.forEach(item => {
          const itemPrice = item.type === 'rental'
            ? parseFloat(item.price) * parseInt(item.duration)
            : parseFloat(item.price);

          subtotal += itemPrice;

          const cartItemHTML = `
            <div class="cart-item">
              <div class="cart-item-details">
                <div class="cart-item-title">
                  ${item.brand} - ${item.category}
                  <span class="cart-item-type ${item.type === 'rental' ? 'rental' : 'purchase'}">
                    ${item.type === 'rental' ? 'Noleggio' : 'Acquisto'}
                  </span>
                </div>
                <div class="cart-item-info">
                  <span>Colore: ${item.color}</span> • 
                  <span>Condizione: ${item.condition}</span>
                </div>
                ${item.type === 'rental' ? `
                  <div class="cart-item-period">
                    Dal ${item.startDate} al ${item.endDate} (${item.duration} ${parseInt(item.duration) === 1 ? 'giorno' : 'giorni'})
                  </div>
                ` : ''}
              </div>
              <div class="cart-item-actions">
                <div class="cart-item-price">${itemPrice.toFixed(2)}€</div>
                <button class="cart-item-remove" data-cart-id="${item.cartId}">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
          `;

          cartItemsContainer.innerHTML += cartItemHTML;
        });

        // Aggiorna i totali
        updateCartTotals(subtotal);

        // Aggiungi event listener ai pulsanti di rimozione
        document.querySelectorAll('.cart-item-remove').forEach(button => {
          button.addEventListener('click', function () {
            const cartId = this.getAttribute('data-cart-id');
            removeFromCart(cartId);
          });
        });
      }

      function updateCartTotals(subtotal) {
        const tax = subtotal * 0.22;
        const total = subtotal + tax;

        document.getElementById('cart-subtotal').textContent = subtotal.toFixed(2) + '€';
        document.getElementById('cart-tax').textContent = tax.toFixed(2) + '€';
        document.getElementById('cart-total').textContent = total.toFixed(2) + '€';
      }

      // Inizializza i date range picker per tutti i prodotti
      document.querySelectorAll('.date-range-input').forEach(input => {
        const productId = input.id.split('-')[1];
        const durataInput = document.getElementById('durata-' + productId);
        const daysCountElement = document.getElementById('days-count-' + productId);
        const startDateInput = document.getElementById('startDate-' + productId);
        const endDateInput = document.getElementById('endDate-' + productId);

        // Imposta la data di oggi come minima selezionabile
        const today = new Date();

        // Ottenere domani come data predefinita di fine
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);

        // Imposta i valori iniziali degli input nascosti per le date
        startDateInput.value = formatDate(today);
        endDateInput.value = formatDate(tomorrow);

        $(input).daterangepicker({
          opens: 'center',
          minDate: today,
          startDate: today,
          endDate: tomorrow,
          locale: {
            format: 'DD/MM/YYYY',
            separator: ' - ',
            applyLabel: 'Applica',
            cancelLabel: 'Annulla',
            fromLabel: 'Da',
            toLabel: 'A',
            weekLabel: 'W',
            customRangeLabel: 'Intervallo personalizzato',
            daysOfWeek: ['Do', 'Lu', 'Ma', 'Me', 'Gi', 'Ve', 'Sa'],
            monthNames: [
              'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',
              'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'
            ],
            firstDay: 1
          }
        }, function (start, end, label) {
          // Calcola il numero di giorni
          const startDate = start.toDate();
          const endDate = end.toDate();
          const diffTime = Math.abs(endDate - startDate);
          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

          // Aggiorna il campo nascosto con il numero di giorni
          durataInput.value = diffDays;

          // Aggiorna i campi nascosti per le date
          startDateInput.value = formatDate(startDate);
          endDateInput.value = formatDate(endDate);

          // Aggiorna il testo che mostra il numero di giorni
          daysCountElement.textContent = `Durata: ${diffDays} ${diffDays === 1 ? 'giorno' : 'giorni'}`;
        });

        // Imposta i valori iniziali
        const initialDiffDays = 1;
        durataInput.value = initialDiffDays;
        daysCountElement.textContent = `Durata: ${initialDiffDays} giorno`;
      });

      // Helper per formattare la data
      function formatDate(date) {
        const options = { day: '2-digit', month: '2-digit', year: 'numeric' };
        return new Intl.DateTimeFormat('it-IT', options).format(date);
      }

      // Gestione form filtro
      document.getElementById('filterForm').addEventListener('submit', function (e) {
        e.preventDefault();

        const formData = new FormData(this);
        const params = new URLSearchParams();

        // Aggiungi solo i campi non vuoti ai parametri
        for (const [key, value] of formData.entries()) {
          if (value.trim() !== '') {
            params.append(key, value);
          }
        }

        fetchProducts('/noleggio?' + params.toString());
      });

      // Gestione form "Mostra tutti"
      document.getElementById('showAllForm').addEventListener('submit', function (e) {
        e.preventDefault();
        fetchProducts('/noleggio');
      });

      // Gestione noleggio prodotti (aggiunta al carrello)
      document.querySelectorAll('.noleggio-form').forEach(form => {
        form.addEventListener('submit', function (e) {
          e.preventDefault();

          const formData = new FormData(this);
          const rentalItem = {
            type: 'rental',
            id: formData.get('id'),
            brand: formData.get('brand'),
            category: formData.get('category'),
            price: formData.get('price'),
            color: formData.get('color'),
            condition: formData.get('condition'),
            duration: formData.get('durata'),
            startDate: formData.get('startDate'),
            endDate: formData.get('endDate'),
            dateRange: formData.get('daterange')
          };

          addToCart(rentalItem);
        });
      });

      // Gestione acquisto prodotti (aggiunta al carrello)
      document.querySelectorAll('.acquisto-form').forEach(form => {
        form.addEventListener('submit', function (e) {
          e.preventDefault();

          const formData = new FormData(this);
          const purchaseItem = {
            type: 'purchase',
            id: formData.get('id'),
            brand: formData.get('brand'),
            category: formData.get('category'),
            price: formData.get('price'),
            color: formData.get('color'),
            condition: formData.get('condition')
          };

          addToCart(purchaseItem);
        });
      });

      // Funzione per caricare i prodotti
      function fetchProducts(url) {
        const productsContainer = document.getElementById('products');
        const loader = document.getElementById('loaderContainer');

        // Mostra loader
        loader.style.display = 'block';

        fetch(url)
          .then(response => {
            if (!response.ok) {
              throw new Error('Errore nel caricamento dei prodotti');
            }
            return response.text();
          })
          .then(html => {
            // Crea un elemento temporaneo per estrarre la sezione prodotti dall'HTML
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;

            // Ottieni la sezione prodotti dalla risposta
            const newProducts = tempDiv.querySelector('#products');

            if (newProducts) {
              productsContainer.innerHTML = newProducts.innerHTML;

              // Riattacca gli event listener ai nuovi form
              productsContainer.querySelectorAll('.noleggio-form').forEach(form => {
                form.addEventListener('submit', function (e) {
                  e.preventDefault();

                  const formData = new FormData(this);
                  const rentalItem = {
                    type: 'rental',
                    id: formData.get('id'),
                    brand: formData.get('brand'),
                    category: formData.get('category'),
                    price: formData.get('price'),
                    color: formData.get('color'),
                    condition: formData.get('condition'),
                    duration: formData.get('durata'),
                    startDate: formData.get('startDate'),
                    endDate: formData.get('endDate'),
                    dateRange: formData.get('daterange')
                  };

                  addToCart(rentalItem);
                });
              });

              productsContainer.querySelectorAll('.acquisto-form').forEach(form => {
                form.addEventListener('submit', function (e) {
                  e.preventDefault();

                  const formData = new FormData(this);
                  const purchaseItem = {
                    type: 'purchase',
                    id: formData.get('id'),
                    brand: formData.get('brand'),
                    category: formData.get('category'),
                    price: formData.get('price'),
                    color: formData.get('color'),
                    condition: formData.get('condition')
                  };

                  addToCart(purchaseItem);
                });
              });

              // Reinizializza i date range picker per i nuovi prodotti
              productsContainer.querySelectorAll('.date-range-input').forEach(input => {
                const productId = input.id.split('-')[1];
                const durataInput = document.getElementById('durata-' + productId);
                const daysCountElement = document.getElementById('days-count-' + productId);
                const startDateInput = document.getElementById('startDate-' + productId);
                const endDateInput = document.getElementById('endDate-' + productId);

                // Imposta la data di oggi come minima selezionabile
                const today = new Date();

                // Ottenere domani come data predefinita di fine
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);

                // Imposta i valori iniziali degli input nascosti per le date
                startDateInput.value = formatDate(today);
                endDateInput.value = formatDate(tomorrow);

                $(input).daterangepicker({
                  opens: 'center',
                  minDate: today,
                  startDate: today,
                  endDate: tomorrow,
                  locale: {
                    format: 'DD/MM/YYYY',
                    separator: ' - ',
                    applyLabel: 'Applica',
                    cancelLabel: 'Annulla',
                    fromLabel: 'Da',
                    toLabel: 'A',
                    weekLabel: 'W',
                    customRangeLabel: 'Intervallo personalizzato',
                    daysOfWeek: ['Do', 'Lu', 'Ma', 'Me', 'Gi', 'Ve', 'Sa'],
                    monthNames: [
                      'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',
                      'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'
                    ],
                    firstDay: 1
                  }
                }, function (start, end, label) {
                  // Calcola il numero di giorni
                  const startDate = start.toDate();
                  const endDate = end.toDate();
                  const diffTime = Math.abs(endDate - startDate);
                  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                  // Aggiorna il campo nascosto con il numero di giorni
                  durataInput.value = diffDays;

                  // Aggiorna i campi nascosti per le date
                  startDateInput.value = formatDate(startDate);
                  endDateInput.value = formatDate(endDate);

                  // Aggiorna il testo che mostra il numero di giorni
                  daysCountElement.textContent = `Durata: ${diffDays} ${diffDays === 1 ? 'giorno' : 'giorni'}`;
                });

                // Imposta i valori iniziali
                const initialDiffDays = 1;
                durataInput.value = initialDiffDays;
                daysCountElement.textContent = `Durata: ${initialDiffDays} giorno`;
              });
            } else {
              // Fallback se non riesce a trovare la sezione prodotti
              productsContainer.innerHTML = '<p id="no-results">Nessun prodotto trovato con i filtri applicati.</p>';
            }
          })
          .catch(error => {
            showNotification(error.message, true);
            console.error('Errore:', error);
          })
          .finally(() => {
            // Nascondi loader
            loader.style.display = 'none';
          });
      }

      // Funzione per mostrare notifiche
      function showNotification(message, isError = false) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.className = 'notification' + (isError ? ' error' : '');
        notification.classList.add('show');

        setTimeout(() => {
          notification.classList.remove('show');
        }, 3000);
      }
    });

  </script>
</body>

</html>